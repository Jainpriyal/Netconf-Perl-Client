  NETCONF Perl client README

   Contents
     * Abstract
     * Documents
     * Supported Platforms
     * Downloads
     * Installation
     * Running the Examples
     * Installation of Perl
     * Installation of Perl Modules Required by Examples
     * Dependencies
     * Support

   --------------------------------------------------------------------------

   Abstract

   Each Juniper Networks routing platform running JUNOS Internet software
   release 7.5B1 or later supports the NETCONF API. The NETCONF API provides
   mechanisms to install, manipulate, and delete the configuration of network
   devices. The NETCONF API uses an Extensible markup Language (XML) based
   data encoding for the configuration data as well as operations and
   messages defined in the API.

   Because NETCONF uses XML based data encoding, you can leverage the myriad
   Perl modules in the public domain to ease the development of client
   applications that monitor and configure Juniper Networks routers. There
   are many modules in the Comprehensive Perl Archival Network (CPAN,
   http://www.cpan.org) and other Perl source repositories that provide ways
   to manipulate XML data (for example, the XML::LibXML modules).

   The Net::Netconf::Manager module provides an object-oriented interface for
   communicating with the NETCONF server so you can start using the NETCONF
   API quickly and easily. There are several modules in this library but
   client applications directly invoke the Manager object only. When the
   client application creates a Net::Netconf::Manager object, it specifies a
   router name and the login name to use when accessing the router (which
   determines the client application's access level).

   The following code segment shows how to use the Net::Netconf::Manager
   object to request information from a Juniper Networks routing platform.
   This example invokes the query called get_chassis_inventory.

 # Step 1: set up the query

 my $query = "get_chassis_inventory";
 my %queryargs = ( detail => 1 );


 # Step 2: Create a Netconf Manager object and connect to the Juniper
 Networks routing platform

 my %deviceinfo = (
  access => "ssh",
  login => "johndoe",
  password => "secret",
  hostname => "router11"
  );
  my $jnx = new Net::Netconf::Manager(%deviceinfo);

  unless ( ref $jnx ) {
         croak "ERROR: $deviceinfo{hostname}: failed to connect.\n";
  }


  # Step 3: send the query and receive a reply

  my $res = $jnx->$query( %queryargs );


 # Step 4: check for error

  if ($jnx->has_error) {
      croak "ERROR: in processing request \n $jnx->{request} \n";
  } else {


 # Step 5: do something with the result
  }

 # Step 6: always disconnect from the server when you're done
 $jnx->disconnect();

    Back to Top  

   Documents

   The following documents are available at http://www.juniper.net/beta for
   the beta release and http://www.juniper.net/support for final release of
   each version of the JUNOS Internet software.

     * NETCONF API Guide
     * JUNOS XML API Configuration Reference
     * JUNOS XML API Operational Reference

    Back to Top  

   Supported Platforms

   The current version of this module has been tested on the following
   platforms. Later releases may support additional platforms.

     * Ubuntu 12.04LTS 
        Back to Top  

       Downloads

       Client Perl applications can communicate with the NETCONF server via
       SSH only. The NETCONF Perl client needs a SSH client program (like
       OpenSSH) installed on the system.

       To download the publicly available version of the NETCONF Perl Client,
       perform the following steps:

         1. Access the Juniper Networks Web site at
            http://www.juniper.net/beta (for beta software) or
            http://www.juniper.net/support (for final release software).
         1. Click on the link labeled "NETCONF API Software" on the left.
         2. Click on the link labeled "NETCONF API Client" to download the
            Net::Netconf::Manager distribution in gzip format.
        Back to Top  

       Installation
        Instructions for UNIX Systems

         1. Make sure Perl is installed. If necessary, see Installation of
            Perl.

            % which perl
            % perl -v

            The NETCONF Perl Client requires version 5.6.1 or later of the
            perl executable. Verify that you are running that version of the
            perl executable. If not, check your PATH or install the latest
            release of perl.

         1. Download the NETCONF gzip archive from the Juniper Networks
            website. The archive is named netconf-perl-n.n.tar.gz, where n.n
            is a release code such as 7.5. For instructions, see Download.
             
         2. Unzip and untar the archive.

            On FreeBSD systems:
            % tar zxf netconf-perl-n.n.tar.gz

         3. Change to the NETCONF directory.
            % cd netconf-perl-n.n
            
         4. Install the prerequisites of Perl modules. If you wish to
            install the required files in your private directory instead of
            the standard directory, you can use the -install_directory option
            to specify your private installation directory. The standard
            directory is the installation directory configured in the perl
            executable. Usually, the standard directory is /usr/lib or
            /usr/local/lib, and you'll need root privilege to install modules
            in these directories.

            Following are the prerequites
            1. Expect Module
            2. File::Which
            3. XML::LibXML
            
            Steps to install Prerequities in Ubuntu12.04LTS :
            1. apt-get install tcl tcl-dev tk tk-dev
            2. apt-get install expect expect-dev
            3. perl -MCPAN -e 'install Bundle::Expect'
            4. cpan File::Which
            5. cpan XML::LibXML
          
         5. Create Net::Netconf makefile.

            If installing Net::Netconf::Manager under the standard directory
            (it's normally /usr/local/lib):
            [/my/netconf-perl-n.n]% perl Makefile.PL

            If installing Net::Netconf::Manager under your own private
            directory:
            [/my/netconf-perl-n.n]% perl Makefile.PL LIB=$PERL5LIB
            INSTALLMAN3DIR=$PERL5LIB/../man/man3
             
         8. Install the Net::Netconf module.

            [/my/netconf-perl-n.n]% make
            [/my/netconf-perl-n.n]% make install
             

            Notes for private directory installation:

               * If you are installing the NETCONF modules in a private
                 directory, remember to set the PERL5LIB, MANPATH, and PATH
                 environment variables before installing the Perl modules and
                 running the examples. If the PERL5LIB variable is set, perl
                 will first look for Perl modules in the specified directory
                 before looking in the standard directory. (If you're using
                 sh, ksh or bash, use EXPORT instead of setenv.)

                 % setenv MANPATH "$MANPATH/:$PERL5LIB/../man"
                 % man Net::Netconf::Manager
                 % setenv PATH "$PATH/:$PERL5LIB/../bin"
                 % which xsltproc
                  
             Back to Top  

            Running the Sample Scripts

            The NETCONF Perl distribution includes sample scripts that
            demonstrate how to use NETCONF to retrieve and change the
            configuration of a Juniper Networks routing platform. The samples
            reside in the netconf-perl-n.n/examples directory.

            Reading configuration: System Information
            This example sends a <get-system-information> request to the
            Juniper Networks routing platform and displays the result to the
            standard output.It also shows how to parse reply from server
            
            
            use Net::Netconf::Manager;

            print "Enter hostname\n";
            my $hostname = <>;
            print "Enter username\n";
            my $login= <>;
            print "Enter password\n";
            my $pass = <>;
            chomp($hostname);
            chomp($login);
            chomp($pass);
            $jnx = new Net::Netconf::Manager( 'access' => 'ssh',
                          'login' => $login,
                          'password' => $pass,
                          'hostname' => $hostname);
                  
            if(! $jnx ) {
                  print STDERR "Unable to connect to Junos device \n";
                  exit 1;
             }
                  
             print "Connection established: " . $jnx->get_session_id . "\n";
                  
             my $reply=$jnx->get_system_information();
                  
             if ($jnx->has_error) {
             print "ERROR: in processing request\n";
             # Get the error
             my $error = $jnx->get_first_error();
             $jnx->print_error_info(%$error);
             exit 1;
             }
                  
             print "Rpc reply from server.\n";
             print ">>>>>>>>>>\n";
             print $reply;
             print "<<<<<<<<<<\n";
                  
             #parsing reply from server
             my $config= $jnx->get_dom();
             $res= $config->getElementsByTagName("hardware-model")->item(0)->getFirstChild->getData;
             $res2= $config->getElementsByTagName("os-name")->item(0)->getFirstChild->getData;
             $res3= $config->getElementsByTagName("host-name")->item(0)->getFirstChild->getData;
                  
             print "\nhardware information  ". $res ."\n";
             print "os-name  " .$res2 . "\n";
             print "host-name  ". $res3. "\n";
                  
             $jnx->disconnect();
                  

            Changing configuration: Edit Configuration
            This example accepts an XML configuration to load. An example
            configuration to load is provided in config.xml. It is an XML
            file containing the RPC requests. You can put your own
            configuration file in the same directory and have
            edit_configuration load it in the target routing platform for
            you. The purpose of this example is to show you how simple it is
            to change your routing platform configuration using NETCONF. See
            the "NETCONF API Guide" for a detailed description of the syntax
            to use for the configuration data you are loading via NETCONF.

              1. Change directory to examples/edit_configuration
                 [/my/netconf-perl-n.n]% cd examples/edit_configuration
                  
              1. Run the edit_configuration.pl script
                 [/my/netconf-perl-n.n/examples/edit_configuration]% perl
                 edit_configuration.pl
                 [-d <level>]
                 [-m <access>]
                 [-l <login>]
                 [-p <password>]
                 <request>
                 <router>

             Example:
            [/my/netconf-perl-n.n/examples/edit_configuration]% perl
            edit_configuration.pl config.xml router11
            login: johndoe
            password:

            Where:
            -d <level>
            Optional. The default level is 4 (warning).

            -m <access>
            Optional. The only allowed value is ssh. It specifies which
            transport protocol to use to communicate with the Juniper
            Networks routing platform.

            -l <login>
            -p <password>
            The login identity and password to use when accessing the Juniper
            Networks routng platform. The login identity must already exist
            in the routing platform configuration and must have at least read
            privilege on the routing platform. (Configure the login account
            by using the CLI command set system login user.) If these
            arguments are not provided on the command line, the user will be
            prompted to enter the information.

            <request>
            Specify the name of the configuration file to be loaded. The
            configuration file included with the example is config.xml. 

            Example of configuration file content in xml format:

                  <configuration>
                      <system>
                          <host-name>foo</host-name>
                      </system>
                  </configuration>


           <router>
           The hostname or IP address of the routing platform.
          


 Router Diagnostics: Diagnose BGP
 This example retrieves the BGP summary from a Juniper Networks routing platform and displays key information on the unestablished
 peers. It shows how useful diagnostic tools can be written using NETCONF.



 You can render the output in plain text using XSLT. The output is saved in
 a file named <router>.xml which is the concatenation of the <get-bgp-summary-information>
 responses on all of the BGP peers for the target router.  Take a look at
 this XML file if you wish to write your own XSL file to render the output.


 * Change directory to examples/diagnose_bgp.
 [/my/netconf-perl-n.n]% cd examples/diagnose_bgp
  

 * Run the diagnose_bgp.pl script.
  [/my/netconf-perl-n.n/examples/diagnose_bgp]% perl diagnose_bgp.pl
                                                           [-d <level>]
                                                           [-m <access>]
                                                           [-l <login>]
                                                           [-p <password>]
                                                           -x <xslfile>
                                                           -o <outputfile>
                                                           <router>


 Example:

 [/my/netconf-perl-n.n/examples/diagnose_bgp]% perl diagnose_bgp.pl
                                                               -x xsl/bgp.xsl
                                                               -o router11.html
  login: johndoe
  password:



 Where:

 -d<level>
 Optional. The default is debug level 4 (warning).



 -m <access>
 Optional. The only allowed value is ssh.
 It specifies which transport protocol to use to communicate with the Juniper Networks routing platform.



 -l <login>
 -p <password>
 The login identity and password to use when accessing the Juniper Networks routing platform. The login identity must already exist in
 the routing platform configuration and must have at least read privilege on the routing platform. (Configure the login account by using the CLI
 command set system login user.) If these arguments are not provided on the command line, the user will be prompted
 to enter the information.

 -x <xslfile>
 -o <outputfile>
 Optional.  If <xslfile> is specified, the <xslfile> is used for rendering the output.  If
 <xslfile> is not specified, xsl/bgp.xsl is used by default.  You can use this XSL file or create your own. 
 If <outputfile> is specified, the transformation is put into <outputfile>. If <outputfile> is not
 specified, the result will be displayed on the standard output. 



 <router>
 The hostname or IP address of the routing platform.



  Back to Top
  


 
 Notes for private directory installation:


 * Remember to set the PERL5LIB environment variable before installing the Perl modules and running the examples.
 PERL5LIB is an environment variable, it can be set to a colon-separated list of directories. If set, perl will first look for
 Perl modules in the PERL5LIB directories before looking in the standard directory. The instruction above uses the csh syntax
 for setting environment variable. For sh, ksh and bash, use EXPORT PERL5LIB=/my/private/directory/lib.
 
  Back to Top
 
 Support


 If you have problems with this Net::Netconf package, please e-mail support@juniper.net. We are looking
 forward to hearing from you.




 Juniper Networks is registered in the U.S. Patent and Trademark Office and in other countries as a trademark of Juniper
 Networks, Inc. Internet Processor, Internet Processor II, JUNOS, JUNOScript, M5, M10, M20, M40, M160, and its corporate,
 product, and service logos are trademarks of Juniper Networks, Inc.  All other trademarks, service marks, registered
 trademarks, or registered service marks are the property of their respective owners. Use of any Juniper Networks trademarks
 in a manner that is likely to cause confusion among its customers or disparages/discredits Juniper Networks is strictly
 prohibited.

 

 Copyright (c) 2005, Juniper Networks, Inc. All Rights Reserved.
